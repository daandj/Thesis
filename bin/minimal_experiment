#!/usr/bin/env python

import sys
import numpy as np

import cbt.games.minimal as mg

def main() -> int:
    # means = np.random.random_sample((10,10))
    means = np.array([
        [0.75, 0.0 , 0.78, 0.22, 0.48, 0.06, 0.01, 0.32, 0.29, 0.1 ],
        [0.36, 0.43, 0.47, 0.4 , 0.95, 0.23, 0.76, 0.16, 0.98, 0.41],
        [0.48, 0.59, 0.5 , 0.34, 0.33, 0.28, 0.95, 0.47, 0.57, 1.0 ],
        [0.17, 0.49, 0.58, 0.53, 0.94, 0.9 , 0.73, 0.02, 0.07, 0.6 ],
        [0.86, 0.54, 0.8 , 0.65, 0.96, 0.57, 0.74, 0.53, 0.48, 0.97],
        [0.85, 0.49, 0.06, 0.65, 0.53, 0.66, 0.4 , 0.75, 0.33, 0.43],
        [0.04, 0.13, 0.09, 0.87, 0.17, 0.43, 0.0 , 0.13, 0.48, 0.83],
        [0.78, 0.3 , 0.53, 0.81, 0.02, 0.27, 0.35, 0.41, 0.02, 0.38],
        [0.31, 0.29, 0.69, 0.68, 0.06, 0.72, 0.82, 0.71, 0.67, 0.53],
        [0.82, 0.62, 0.47, 0.1 , 0.52, 0.35, 0.96, 0.62, 0.28, 0.56]
    ])

    print("Means")
    game = mg.Minimal(means=means)
    game.print_means()
    min_max(means)

    print("Results")
    first_player = mg.CBTMinimalPlayer(0, data_flag=True)
    first_player.iterations = 20000
    first_player.make_move(game)
    return 0

def min_max(means: np.ndarray) -> int:
    print(means.min(axis=1).max(), file=sys.stderr)
    return 0

if __name__ == '__main__':
    sys.exit(main())
