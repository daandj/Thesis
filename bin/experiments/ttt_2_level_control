#!/usr/bin/env python

import sys
import numpy as np

import cbt.games.tictactoe as ttt
import cbt.algorithms.minimal_UCB as ucb

def main(size: int, reps: int = 10) -> int:
    for iterations in [10,100,1000,10000,100000]:
        outcomes = [0.0] * reps
        for i in range(reps):
            game = ttt.TicTacToe(print_flag=False)
            game.set_board_size(size)

            ucb_player = ucb.UCBPlayer(0, data_flag=False, print_flag=False)
            ucb_player.iterations = iterations
            move = ucb_player.make_move(game)
            print(f"ttt_2_level_control {size} {iterations} {i} {move}", file=sys.stderr)

            outcomes[i] = ucb_player.win_rate
            game.reset()
        print(f"{iterations} {sum(outcomes) / reps} {np.quantile(outcomes, 0.25)} "
              f"{np.quantile(outcomes, 0.75)}")
    return 0


def min_max(means: np.ndarray) -> int:
    print(f"minmax={means.min(axis=1).max()}", file=sys.stderr)
    return 0

if __name__ == '__main__':
    s = int(sys.argv[1])

    sys.exit(main(s))
