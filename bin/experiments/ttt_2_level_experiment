#!/usr/bin/env python

import sys
import numpy as np

import settings # type: ignore

import cbt.games.tictactoe as ttt
import cbt.algorithms.CBT1 as cbt

def main(size: int, reps: int = 10) -> int:
    params = settings.parameters["ttt_2_level"][size]

    for iterations in [10,100,1000,10000,100000]:
        outcomes = [0.0] * reps
        for i in range(reps):
            game = ttt.TicTacToe(print_flag=False)
            game.set_board_size(size)

            cbt_player = cbt.CBT1Player(0, data_flag=False, print_flag=False)

            cbt_player.iterations = iterations
            cbt_player.set_parameters(params["exploration"], params["learning_rate"])

            move = cbt_player.make_move(game)
            print(f"ttt_2_level_experiment {size} {iterations} {i} {move}",
                  file=sys.stderr)

            outcomes[i] = cbt_player.win_rate
        print(f"{iterations} {sum(outcomes) / reps} "
              f"{np.quantile(outcomes, 0.25)} {np.quantile(outcomes, 0.75)}")

    return 0

def min_max(means: np.ndarray) -> int:
    print(f"minmax={means.min(axis=1).max()}", file=sys.stderr)
    return 0

if __name__ == '__main__':
    s = int(sys.argv[1])

    sys.exit(main(s))
